{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["export type NodeId = string;\nexport type EdgeWeight = number;\nexport type EncodedEdge = string;\n\nexport interface Serialized {\n  nodes: { id: NodeId }[];\n  links: { source: NodeId; target: NodeId; weight: EdgeWeight }[];\n}\n\nexport class CycleError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, CycleError.prototype);\n  }\n}\n\nexport function Graph(serialized?: Serialized) {\n  // Returned graph instance\n  const graph = {\n    addNode,\n    removeNode,\n    nodes,\n    adjacent,\n    addEdge,\n    removeEdge,\n    hasEdge,\n    setEdgeWeight,\n    getEdgeWeight,\n    indegree,\n    outdegree,\n    depthFirstSearch,\n    hasCycle,\n    lowestCommonAncestors,\n    topologicalSort,\n    shortestPath,\n    shortestPaths,\n    serialize,\n    deserialize,\n  };\n\n  // The adjacency list of the graph.\n  // Keys are node ids.\n  // Values are adjacent node id arrays.\n  const edges: Record<NodeId, NodeId[]> = {};\n\n  // The weights of edges.\n  // Keys are string encodings of edges.\n  // Values are weights (numbers).\n  const edgeWeights: Record<EncodedEdge, EdgeWeight> = {};\n\n  // If a serialized graph was passed into the constructor, deserialize it.\n  if (serialized) {\n    deserialize(serialized);\n  }\n\n  // Adds a node to the graph.\n  // If node was already added, this function does nothing.\n  // If node was not already added, this function sets up an empty adjacency list.\n  function addNode(node: NodeId) {\n    edges[node] = adjacent(node);\n    return graph;\n  }\n\n  // Removes a node from the graph.\n  // Also removes incoming and outgoing edges.\n  function removeNode(node: NodeId) {\n    // Remove incoming edges.\n    Object.keys(edges).forEach(function (u) {\n      edges[u].forEach(function (v) {\n        if (v === node) {\n          removeEdge(u, v);\n        }\n      });\n    });\n\n    // Remove outgoing edges (and signal that the node no longer exists).\n    delete edges[node];\n\n    return graph;\n  }\n\n  // Gets the list of nodes that have been added to the graph.\n  function nodes(): NodeId[] {\n    // TODO: Better implementation with set data structure\n    const nodeSet: Record<NodeId, boolean> = {};\n\n    Object.keys(edges).forEach(function (u) {\n      nodeSet[u] = true;\n      edges[u].forEach(function (v) {\n        nodeSet[v] = true;\n      });\n    });\n    return Object.keys(nodeSet);\n  }\n\n  // Gets the adjacent node list for the given node.\n  // Returns an empty array for unknown nodes.\n  function adjacent(node: NodeId): NodeId[] {\n    return edges[node] || [];\n  }\n\n  // Computes a string encoding of an edge,\n  // for use as a key in an object.\n  function encodeEdge(u: NodeId, v: NodeId): EncodedEdge {\n    return u + \"|\" + v;\n  }\n\n  // Sets the weight of the given edge.\n  function setEdgeWeight(u: NodeId, v: NodeId, weight: EdgeWeight) {\n    edgeWeights[encodeEdge(u, v)] = weight;\n    return graph;\n  }\n\n  // Gets the weight of the given edge.\n  // Returns 1 if no weight was previously set.\n  function getEdgeWeight(u: NodeId, v: NodeId): EdgeWeight {\n    const weight = edgeWeights[encodeEdge(u, v)];\n    return weight === undefined ? 1 : weight;\n  }\n\n  // Adds an edge from node u to node v.\n  // Implicitly adds the nodes if they were not already added.\n  function addEdge(u: NodeId, v: NodeId, weight?: EdgeWeight) {\n    addNode(u);\n    addNode(v);\n    adjacent(u).push(v);\n\n    if (weight !== undefined) {\n      setEdgeWeight(u, v, weight);\n    }\n\n    return graph;\n  }\n\n  // Removes the edge from node u to node v.\n  // Does not remove the nodes.\n  // Does nothing if the edge does not exist.\n  function removeEdge(u: NodeId, v: NodeId) {\n    if (edges[u]) {\n      edges[u] = adjacent(u).filter(function (_v) {\n        return _v !== v;\n      });\n    }\n    return graph;\n  }\n\n  // Returns true if there is an edge from node u to node v.\n  function hasEdge(u: NodeId, v: NodeId) {\n    return adjacent(u).includes(v);\n  }\n\n  // Computes the indegree for the given node.\n  // Not very efficient, costs O(E) where E = number of edges.\n  function indegree(node: NodeId) {\n    let degree = 0;\n    function check(v: NodeId) {\n      if (v === node) {\n        degree++;\n      }\n    }\n    Object.keys(edges).forEach(function (u) {\n      edges[u].forEach(check);\n    });\n    return degree;\n  }\n\n  // Computes the outdegree for the given node.\n  function outdegree(node: NodeId) {\n    return node in edges ? edges[node].length : 0;\n  }\n\n  // Depth First Search algorithm, inspired by\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 604\n  // The additional option `includeSourceNodes` specifies whether to\n  // include or exclude the source nodes from the result (true by default).\n  // If `sourceNodes` is not specified, all nodes in the graph\n  // are used as source nodes.\n  function depthFirstSearch(\n    sourceNodes?: NodeId[],\n    includeSourceNodes: boolean = true,\n    errorOnCycle: boolean = false,\n  ) {\n    if (!sourceNodes) {\n      sourceNodes = nodes();\n    }\n\n    if (typeof includeSourceNodes !== \"boolean\") {\n      includeSourceNodes = true;\n    }\n\n    const visited: Record<NodeId, boolean> = {};\n    const visiting: Record<NodeId, boolean> = {};\n    const nodeList: NodeId[] = [];\n\n    function DFSVisit(node: NodeId) {\n      if (visiting[node] && errorOnCycle) {\n        throw new CycleError(\"Cycle found\");\n      }\n      if (!visited[node]) {\n        visited[node] = true;\n        visiting[node] = true; // temporary flag while visiting\n        adjacent(node).forEach(DFSVisit);\n        visiting[node] = false;\n        nodeList.push(node);\n      }\n    }\n\n    if (includeSourceNodes) {\n      sourceNodes.forEach(DFSVisit);\n    } else {\n      sourceNodes.forEach(function (node) {\n        visited[node] = true;\n      });\n      sourceNodes.forEach(function (node) {\n        adjacent(node).forEach(DFSVisit);\n      });\n    }\n\n    return nodeList;\n  }\n\n  // Returns true if the graph has one or more cycles and false otherwise\n  function hasCycle(): boolean {\n    try {\n      depthFirstSearch(undefined, true, true);\n      // No error thrown -> no cycles\n      return false;\n    } catch (error) {\n      if (error instanceof CycleError) {\n        return true;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  // Least Common Ancestors\n  // Inspired by https://github.com/relaxedws/lca/blob/master/src/LowestCommonAncestor.php code\n  // but uses depth search instead of breadth. Also uses some optimizations\n  function lowestCommonAncestors(node1: NodeId, node2: NodeId) {\n    const node1Ancestors: NodeId[] = [];\n    const lcas: NodeId[] = [];\n\n    function CA1Visit(visited: Record<NodeId, boolean>, node: NodeId): boolean {\n      if (!visited[node]) {\n        visited[node] = true;\n        node1Ancestors.push(node);\n        if (node == node2) {\n          lcas.push(node);\n          return false; // found - shortcut\n        }\n        return adjacent(node).every((node) => {\n          return CA1Visit(visited, node);\n        });\n      } else {\n        return true;\n      }\n    }\n\n    function CA2Visit(visited: Record<NodeId, boolean>, node: NodeId) {\n      if (!visited[node]) {\n        visited[node] = true;\n        if (node1Ancestors.indexOf(node) >= 0) {\n          lcas.push(node);\n        } else if (lcas.length == 0) {\n          adjacent(node).forEach((node) => {\n            CA2Visit(visited, node);\n          });\n        }\n      }\n    }\n\n    if (CA1Visit({}, node1)) {\n      // No shortcut worked\n      CA2Visit({}, node2);\n    }\n\n    return lcas;\n  }\n\n  // The topological sort algorithm yields a list of visited nodes\n  // such that for each visited edge (u, v), u comes before v in the list.\n  // Amazingly, this comes from just reversing the result from depth first search.\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 613\n  function topologicalSort(\n    sourceNodes?: NodeId[],\n    includeSourceNodes: boolean = true,\n  ) {\n    return depthFirstSearch(sourceNodes, includeSourceNodes, true).reverse();\n  }\n\n  // Dijkstra's Shortest Path Algorithm.\n  // Cormen et al. \"Introduction to Algorithms\" 3rd Ed. p. 658\n  // Variable and function names correspond to names in the book.\n  function shortestPath(source: NodeId, destination: NodeId) {\n    // Upper bounds for shortest path weights from source.\n    const d: Record<NodeId, EdgeWeight> = {};\n\n    // Predecessors.\n    const p: Record<NodeId, NodeId> = {};\n\n    // Poor man's priority queue, keyed on d.\n    let q: Record<NodeId, boolean> = {};\n\n    function initializeSingleSource() {\n      nodes().forEach(function (node) {\n        d[node] = Infinity;\n      });\n      if (d[source] !== Infinity) {\n        throw new Error(\"Source node is not in the graph\");\n      }\n      if (d[destination] !== Infinity) {\n        throw new Error(\"Destination node is not in the graph\");\n      }\n      d[source] = 0;\n    }\n\n    // Adds entries in q for all nodes.\n    function initializePriorityQueue() {\n      nodes().forEach(function (node) {\n        q[node] = true;\n      });\n    }\n\n    // Returns true if q is empty.\n    function priorityQueueEmpty() {\n      return Object.keys(q).length === 0;\n    }\n\n    // Linear search to extract (find and remove) min from q.\n    function extractMin(): NodeId | null {\n      let min = Infinity;\n      let minNode;\n      Object.keys(q).forEach(function (node) {\n        if (d[node] < min) {\n          min = d[node];\n          minNode = node;\n        }\n      });\n      if (minNode === undefined) {\n        // If we reach here, there's a disconnected subgraph, and we're done.\n        q = {};\n        return null;\n      }\n      delete q[minNode];\n      return minNode;\n    }\n\n    function relax(u: NodeId, v: NodeId) {\n      const w = getEdgeWeight(u, v);\n      if (d[v] > d[u] + w) {\n        d[v] = d[u] + w;\n        p[v] = u;\n      }\n    }\n\n    function dijkstra() {\n      initializeSingleSource();\n      initializePriorityQueue();\n      while (!priorityQueueEmpty()) {\n        const u = extractMin();\n        if (u === null) return;\n        adjacent(u).forEach(function (v) {\n          relax(u as string, v);\n        });\n      }\n    }\n\n    // Assembles the shortest path by traversing the\n    // predecessor subgraph from destination to source.\n    function path() {\n      const nodeList: NodeId[] & { weight?: EdgeWeight } = [];\n      let weight = 0;\n      let node = destination;\n      while (p[node]) {\n        nodeList.push(node);\n        weight += getEdgeWeight(p[node], node);\n        node = p[node];\n      }\n      if (node !== source) {\n        throw new Error(\"No path found\");\n      }\n      nodeList.push(node);\n      nodeList.reverse();\n      nodeList.weight = weight;\n      return nodeList;\n    }\n\n    dijkstra();\n\n    return path();\n  }\n\n  function shortestPaths(source: NodeId, destination: NodeId) {\n    let path = shortestPath(source, destination);\n    const paths = [path],\n      removedEdges: { u: NodeId; v: NodeId; weight: EdgeWeight }[] = [],\n      weight = path.weight;\n    while (weight) {\n      const u = path[0];\n      const v = path[1];\n\n      if (hasEdge(u, v)) {\n        removedEdges.push({ u, v, weight: getEdgeWeight(u, v) });\n        removeEdge(u, v);\n      }\n\n      if (hasEdge(v, u)) {\n        removedEdges.push({ u: v, v: u, weight: getEdgeWeight(v, u) });\n        removeEdge(v, u);\n      }\n\n      try {\n        path = shortestPath(source, destination);\n        if (!path.weight || weight < path.weight) break;\n        paths.push(path);\n      } catch (e) {\n        break;\n      }\n    }\n    for (const { u, v, weight } of removedEdges) addEdge(u, v, weight);\n    return paths;\n  }\n\n  // Serializes the graph.\n  function serialize() {\n    const serialized: Serialized = {\n      nodes: nodes().map(function (id) {\n        return { id: id };\n      }),\n      links: [],\n    };\n\n    serialized.nodes.forEach(function (node) {\n      const source = node.id;\n      adjacent(source).forEach(function (target) {\n        serialized.links.push({\n          source: source,\n          target: target,\n          weight: getEdgeWeight(source, target),\n        });\n      });\n    });\n\n    return serialized;\n  }\n\n  // Deserializes the given serialized graph.\n  function deserialize(serialized: Serialized) {\n    serialized.nodes.forEach(function (node) {\n      addNode(node.id);\n    });\n    serialized.links.forEach(function (link) {\n      addEdge(link.source, link.target, link.weight);\n    });\n    return graph;\n  }\n\n  // The returned graph instance.\n  return graph;\n}\n\nexport default Graph;\n"],"names":["Error","constructor","message","super","Object","setPrototypeOf","this","CycleError","prototype","serialized","graph","addNode","removeNode","node","keys","edges","forEach","u","v","removeEdge","nodes","adjacent","addEdge","hasEdge","setEdgeWeight","getEdgeWeight","indegree","degree","check","outdegree","length","depthFirstSearch","hasCycle","undefined","error","lowestCommonAncestors","node1","node2","node1Ancestors","CA1Visit","visited","push","lcas","every","indexOf","CA2Visit","topologicalSort","sourceNodes","includeSourceNodes","reverse","shortestPath","shortestPaths","source","destination","path","paths","removedEdges","weight","e","serialize","map","id","links","target","deserialize","edgeWeights","nodeSet","encodeEdge","filter","_v","includes","errorOnCycle","visiting","nodeList","DFSVisit","d","q","extractMin","min","Infinity","minNode","w","p","initializeSingleSource","relax","dijkstra","link"],"mappings":"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"}